<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iot on Debashish Sahu</title>
    <link>https://www.debashishsahu.com/categories/iot/</link>
    <description>Recent content in iot on Debashish Sahu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Oct 2018 00:00:00 -0500</lastBuildDate><atom:link href="https://www.debashishsahu.com/categories/iot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using ESP8266 to Call RESTful API From TheRide to Get Real-Time BUS Data</title>
      <link>https://www.debashishsahu.com/posts/using-esp8266-to-call-restful-api-from-theride-to-get-real-time-bus-data/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/using-esp8266-to-call-restful-api-from-theride-to-get-real-time-bus-data/</guid>
      <description>Here is a tutorial on how to call RESTful API on ESP8266 and process the data using ArduinoJSON. This data is visually represented in a NeoPixel ring for easy tracking of 3 buses approaching a certain stop. This code also sends MQTT messages with the received data.
debsahu/RESTful-Ride Using ESP8266 to call RESTful API from http://TheRide.org to get real-time BUS data
Features:  Easy to read interface Fast and Responsive Portable, i.</description>
    </item>
    
    <item>
      <title>Hacking an Automatic Trash Can to Listen to You</title>
      <link>https://www.debashishsahu.com/posts/hacking-an-automatic-trash-can-to-listen-to-you/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/hacking-an-automatic-trash-can-to-listen-to-you/</guid>
      <description>Idea To convert an automatic trash can into a smart one.
Hardware  Automatic Trash Can Wemos D1 mini (ESP8266) 2N2222 transistor  Implementation Here we use an ESP8266 to tap into the pins and emulate a physical button press. The ESP8266 uses a code as described in https://github.com/debsahu/SmartTrashCan to emulate a Wemo Switch, which is detected by Alexa/Echo device as a switch.
GitHub: debsahu/SmartTrashCan Dependencies    Library Link Use     Wemo Switch Emulator Library https://github.</description>
    </item>
    
    <item>
      <title>Using Gestures to Control Lights on Home-Assistant</title>
      <link>https://www.debashishsahu.com/posts/using-gestures-to-control-lights-on-home-assistant/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/using-gestures-to-control-lights-on-home-assistant/</guid>
      <description>    Getting one&amp;rsquo;s hands on APDS9960 is very easy, that can be used to detect hand gestures. Here we use this sensor to control lights on Home Assistant based on a gesture observed on sensor.
Software Libraries used:  HARestAPI GitHub: debsahu/HARestAPI APDS9960 GitHub: SteveQuinn1/SparkFun_APDS-9960_Sensor_Arduino_Library SSD1306 OLED I2C GitHub: ThingPulse/esp8266-oled-ssd1306   </description>
    </item>
    
    <item>
      <title>ESP8266 Talking to AWS IoT Using MQTT</title>
      <link>https://www.debashishsahu.com/posts/esp8266-talking-to-aws-iot-using-mqtt/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/esp8266-talking-to-aws-iot-using-mqtt/</guid>
      <description>Arduino library connecting to the AWS IoT service from an ESP8266 using websockets and MQTT.
GitHub: debsahu/esp8266-arduino-aws-iot-ws ⚠️ ⚠️ ⚠️ This is no longer maintained and obsolete, there is better way to do this: follow instructions from here Still want to use this, follow instructions below ⚠️ ⚠️ ⚠️ Arduino Library derived from joekickass/esp8266-arduino-aws-iot-ws to work with Arduino
Dependencies    Library Link Use     arduinoWebSockets https://github.</description>
    </item>
    
    <item>
      <title>ESP8266 Making Google Home Speak</title>
      <link>https://www.debashishsahu.com/posts/esp8266-making-google-home-speak/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/esp8266-making-google-home-speak/</guid>
      <description>Using esp8266-google-home-notifier library on ESP8266 to make Google Home speak!
Software Prerequisites/Limitations  The GoogleHomeName must match the name of Google Home / mini setup in Google Home App. The ESP8266 must be on the same network as Google Home. MDNS: Dont include ESP8266mDNS.h supplied by Arduino-ESP8266. Internal ESP8266mDNS.h should suffice.  Libraries required  esp8266-google-home-notifier esp8266-google-tts WiFiManager (optional)  GitHub: debsahu/GoogleSay sercret.h
#define SECRET const char* ssid = &amp;quot;&amp;lt;WiFiSSID&amp;gt;&amp;quot;; const char* password = &amp;quot;&amp;lt;WiFiPassword&amp;gt;&amp;quot;; GoogleSay.</description>
    </item>
    
    <item>
      <title>ESP32 Communicating With Xiaomi Flora Plant Sensor Using BLE</title>
      <link>https://www.debashishsahu.com/posts/esp32-communicating-with-xiaomi-flora-plant-sensor-using-ble/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/esp32-communicating-with-xiaomi-flora-plant-sensor-using-ble/</guid>
      <description>Using ESP32 to communicate with Xiaomi flora (miflora) plant sensor using BLE and posting the values on MQTT server. I also demonstrate the use of Home Assistant miflora sensor component.
Change ESP32 Partition: https://desire.giesecke.tk/index.php/2018/04/20/change-partition-size-arduino-ide/ Home Assistant miflora sensor: https://www.home-assistant.io/components/sensor.miflora/
GitHub: sidddy/flora Archived code from https://github.com/sidddy/flora below
config.h
// array of different xiaomi flora MAC addresses char* FLORA_DEVICES[] = { &amp;quot;C4:7C:8D:67:11:11&amp;quot;, &amp;quot;C4:7C:8D:67:22:22&amp;quot;, &amp;quot;C4:7C:8D:67:33:33&amp;quot; }; // sleep between to runs in seconds #define SLEEP_DURATION 30 * 60 // emergency hibernate countdown in seconds #define EMERGENCY_HIBERNATE 3 * 60 // how often should the battery be read - in run count #define BATTERY_INTERVAL 6 // how often should a device be retried in a run when something fails #define RETRY 3 const char* WIFI_SSID = &amp;quot;ssid&amp;quot;; const char* WIFI_PASSWORD = &amp;quot;password&amp;quot;; // MQTT topic gets defined by &amp;quot;&amp;lt;MQTT_BASE_TOPIC&amp;gt;/&amp;lt;MAC_ADDRESS&amp;gt;/&amp;lt;property&amp;gt;&amp;quot; // where MAC_ADDRESS is one of the values from FLORA_DEVICES array // property is either temperature, moisture, conductivity, light or battery const char* MQTT_HOST = &amp;quot;10.</description>
    </item>
    
    <item>
      <title>The Button: Amazon &#34;Dash&#34; Type Button to Communicate to Home-Assistant</title>
      <link>https://www.debashishsahu.com/posts/the-button-amazon-dash-type-button-to-communicate-to-home-assistant/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/the-button-amazon-dash-type-button-to-communicate-to-home-assistant/</guid>
      <description>An attempt to build a Amazon &amp;ldquo;Dash&amp;rdquo; type button to communicate with Home Assistant, which is a combination of two different projects
GitHub: debsahu/TheButton Things we want to achieve:  Low on power consumtion: ESP8266 is OFF when the button is not pressed debsahu/ESP_External_Interrupt Portable: Uses 18650 battery, lasts years Talks to Home Assistant: debsahu/HARestAPI    ESP_External_Interrupt  GitHub: https://github.com/debsahu/ESP_External_Interrupt
  HARestAPI  GitHub: https://github.</description>
    </item>
    
    <item>
      <title>Image Recognition Using Movidius Neural Compute Stick on a RPi0W</title>
      <link>https://www.debashishsahu.com/posts/image-recognition-using-movidius-neural-compute-stick-on-a-rpi0w/</link>
      <pubDate>Sun, 27 May 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/image-recognition-using-movidius-neural-compute-stick-on-a-rpi0w/</guid>
      <description>Let&amp;rsquo;s build a security camera using Raspberry Pi Zero W and Movidius Neural Compute Stick to recognize a &amp;ldquo;person&amp;rdquo; on the video stream
GitHub: debsahu/PiCamMovidius Set up NCSDK API  Install required packages on Pi  sudo apt-get install -y libusb-1.0-0-dev libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler libatlas-base-dev git automake byacc lsb-release cmake libgflags-dev libgoogle-glog-dev liblmdb-dev swig3.0 graphviz libxslt-dev libxml2-dev gfortran python3-dev python-pip python3-pip python3-setuptools python3-markdown python3-pillow python3-yaml python3-pygraphviz python3-h5py python3-nose python3-lxml python3-matplotlib python3-numpy python3-protobuf python3-dateutil python3-skimage python3-scipy python3-six python3-networkx python3-tk libboost-python-dev  Clone NCSDK  cd ~ git clone https://github.</description>
    </item>
    
    <item>
      <title>MeshyMcLighting: NeoPixels Lighting Solution Using Mesh Network</title>
      <link>https://www.debashishsahu.com/posts/meshymclighting-neopixels-lighting-solution-using-mesh-network/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/meshymclighting-neopixels-lighting-solution-using-mesh-network/</guid>
      <description>Wouldn&amp;rsquo;t be cool for many McLighting (RGB LED lighting using NeoPixels) to talk to each other and synchronize? Here is my naive attempt at this, which requires McLighting to be served as stand-alone web-client.
MeshyMcLighting What is this? Wouldn&amp;rsquo;t be cool for many McLighting to talk to each other and synchronize? Here is my naive attempt at this, which requires McLighting to be served as stand-alone webclient.</description>
    </item>
    
    <item>
      <title>Using RTL-SDR to Read Values From Wireless Electric/Gas/Water Meters</title>
      <link>https://www.debashishsahu.com/posts/using-rtl-sdr-to-read-values-from-wireless-electric-gas-water-meters/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/using-rtl-sdr-to-read-values-from-wireless-electric-gas-water-meters/</guid>
      <description>    An attempt to use RTL-SDR to read values from wireless electric/gas/water meters and visualize these values on Home Assistant.
Software Based on bemasher/RTLAMR Project: https://github.com/bemasher/rtlamr
 </description>
    </item>
    
    <item>
      <title>RobinhoodAPI: Live Stock Prices From Robinhood on ESP8266</title>
      <link>https://www.debashishsahu.com/posts/robinhoodapi-live-stock-prices-from-robinhood-on-esp8266/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/robinhoodapi-live-stock-prices-from-robinhood-on-esp8266/</guid>
      <description>A simple Arduino library that retrieves live stock prices from www.robinhood.com in JSON format and processes it for ESP8266. In one example, we demonstrate a whole bunch of stock prices scrolling through a dot-matrix display.
Github: debsahu/RobinhoodAPI An Arduino library to talk to Robin Hood using non-documented Rest API made for ESP8266. Some unofficial documentaion by @sanko is available at here]
Using the Library  Download this GitHub library.</description>
    </item>
    
    <item>
      <title>HARestAPI: Control Home Assistant Directly Using ESP8266</title>
      <link>https://www.debashishsahu.com/posts/harestapi-control-home-assistant-directly-using-esp8266/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/harestapi-control-home-assistant-directly-using-esp8266/</guid>
      <description>Control components on Home Assistant directly from ESP8266. This is an Arduino Library that can be used in various projects without the requirement of setup of a MQTT sensor + automation on HA. This uses RESTful API commands.
Idea  Control components on Home Assistant directly from ESP8266.  Implementation  Develop an Arduino Library that can be used in various projects without the requirement of setup of a MQTT sensor + automation on HA.</description>
    </item>
    
    <item>
      <title>ESP8266 Based Color Sensor Talking to Home Assistant via RestAPI</title>
      <link>https://www.debashishsahu.com/posts/esp8266-based-color-sensor-talking-to-home-assistant-via-restapi/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/esp8266-based-color-sensor-talking-to-home-assistant-via-restapi/</guid>
      <description>    Did you ever want to use ESP8266 to communicate to Home Assistant directly? Here we use a TCS34725 color sensor to read colors and change a RGB light in Home Assistant to the color observed.
Hardware  TCS34725 color sensor SSD 1306 OLED Wemos D1 mini (ESP8266)  Software  RGB Lights connected to Home Assistant  toblum/McLighting Aircoookie/WLED  </description>
    </item>
    
    <item>
      <title>Talking to Twitter Using TwitterWebAPI for ESP8266</title>
      <link>https://www.debashishsahu.com/posts/talking-to-twitter-using-twitterwebapi-for-esp8266/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/talking-to-twitter-using-twitterwebapi-for-esp8266/</guid>
      <description>Idea:  Use ESP8266 to talk to Twitter Get User Data or Tweet or Search Twitter Display the data on a Dot-Matrix display  Implementation I created an Arduino library to talk to Twitter using its Web API made for ESP8266. There are other approaches like using a bearer token arduino-twitter-api, but comes with limitations in terms of not being able to send tweet. This Arduino library TwitterWebAPI can both search/read and post tweets.</description>
    </item>
    
    <item>
      <title>Internet Connected Smoke Alarm</title>
      <link>https://www.debashishsahu.com/posts/internet-connected-smoke-alarm/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/internet-connected-smoke-alarm/</guid>
      <description>Have you wondered how to build a internet connected smoke alarm using ESP8266 and a cheap Kidde RF-SM-DC?
Overall idea is to detect smoke alarm signals and send MQTT message. Home Assistant reads the MQTT message and sends out notifications that can be used to notify your local fire station.
ESP8266 sends a MQTT message until the smoke alarm is beeping.
Software Refer to https://github.com/debsahu/ESP_External_Interrupt to build the ESP8266 part of the internet connected smoke alarm.</description>
    </item>
    
    <item>
      <title>Extreme Power-Save Mode: ESP8266 Powered ON After External Interrupt</title>
      <link>https://www.debashishsahu.com/posts/extreme-power-save-mode-esp8266-powered-on-after-external-interrupt/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/extreme-power-save-mode-esp8266-powered-on-after-external-interrupt/</guid>
      <description>Have you ever wondered how to turn on ESP8266 using external interrupt? Build a battery powered amazon dash button or a 18650 lipo powered door bell using ESP8266 without putting the device in deep sleep? Here is your answer.
Idea  Keep ESP8266 on OFF mode as default External 3.3V signal (can be short or long) arrives and turns ON ESP8266 ESP8266 wakes up and keeps itself awake until a task is perfomed Send MQTT data to server Put ESP8266 back to power OFF state  Implementation  RST pin is always HIGH/3.</description>
    </item>
    
    <item>
      <title>Internet Connected Dog Water Bowl Sensor</title>
      <link>https://www.debashishsahu.com/posts/internet-connected-dog-water-bowl-sensor/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/internet-connected-dog-water-bowl-sensor/</guid>
      <description>Wouldn’t it be nice to know if your dog’s water bowl is empty? Let us build a sensor that measures the water level every 5 minutes. This value is sent to MQTT server and Home Assistant automation takes care of the rest.
This sensor connects to MQTT and Home Assistant. See dogsensor.yaml for adding this to HA. Assumes that one has set up various notification sensors available in HA.</description>
    </item>
    
    <item>
      <title>MOSFET Used as Switch to Control a 12V Fan</title>
      <link>https://www.debashishsahu.com/posts/mosfet-used-as-switch-to-control-a-12v-fan/</link>
      <pubDate>Sun, 12 Mar 2017 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/mosfet-used-as-switch-to-control-a-12v-fan/</guid>
      <description>Lets turn on and off low powered fan running at low (&amp;lt;20V) DC voltages. We shall use a MOSFET to achieve this. Hardware  IRLML0030PBF ATTiny85 2-pin 12V Fan  Wiring MOSFETs have three terminals Drain (D), Source (S) and Gate (G), where source is connected to ground and the +12V or +5V along with load (Fan) is connected to drain. The MOSFET is on when gate voltage is higher than 1.</description>
    </item>
    
    <item>
      <title>How to Build a 3.3V Voltage Regulator</title>
      <link>https://www.debashishsahu.com/posts/how-to-build-a-3-3v-voltage-regulator/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/how-to-build-a-3-3v-voltage-regulator/</guid>
      <description>    Here are the instructions to wire a stable AMS1117-3.3 voltage regulator properly. This can power an ESP8266 or any 3.3V micro-controller reliably supporting current draws up to 1A.
Hardware  AMS 1117-3.3 10 uF Electrolytic Capacitor 104 Ceramic Capacitor  Wiring AMS1117-3.3 (right to left)  Pin 1: GND Pin 2: Vout Pin 3: Vin  Connections  5-12V -&amp;gt; Vin GND -&amp;gt; GND 10 uF Electrolytic Capacitor +ve -&amp;gt; Vout 10 uF Electrolytic Capacitor GND -&amp;gt; GND 104 Ceramic Capacitor +ve -&amp;gt; Vin 104 Ceramic Capacitor GND -&amp;gt; GND  </description>
    </item>
    
    <item>
      <title>IoT Dot Matrix Display: Twitter Mentions Using ESP8266 Adafruit.io and IFTTT</title>
      <link>https://www.debashishsahu.com/posts/iot-dot-matrix-display-twitter-mentions-using-esp8266-adafruit-io-and-ifttt/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 -0500</pubDate>
      
      <guid>https://www.debashishsahu.com/posts/iot-dot-matrix-display-twitter-mentions-using-esp8266-adafruit-io-and-ifttt/</guid>
      <description>Let’s say that you don’t have your smartphone around and someone mentions you on twitter. Wouldn’t it be nice to have a display that automatically reads your twitter mentions and show it on a scrolling display? So let’s build a internet controlled (IoT) dot-matrix display that does this for us using an ESP8266.
The plan to accomplish this is as follows:  Someone mentions us on twitter (in my case @debsahu) IF This Then That (IFTTT) tracks these mentions and posts this data on Adafruit.</description>
    </item>
    
  </channel>
</rss>
