[{"content":"    A simple Arduino library that retrieves live stock prices from www.robinhood.com in JSON format and processes it for ESP8266. In one example, we demonstrate a whole bunch of stock prices scrolling through a dot-matrix display.\nGithub: debsahu/RobinhoodAPI An Arduino library to talk to Robin Hood using non-documented Rest API made for ESP8266. Some unofficial documentaion by @sanko is available at here]\nUsing the Library  Download this GitHub library. In Arduino, Goto Sketch -\u0026gt; Include Library -\u0026gt; Add .ZIP Library\u0026hellip; and point to the zip file downloaded. Install ArduinoJSON (mandatory: Reply from RobinHood is JSON) using the same process.  To use in your sketch include these lines.\n#include \u0026lt;ESP8266WiFi.h\u0026gt; #include \u0026lt;RobinhoodAPI.h\u0026gt; Declare WiFiClientSecure and pass it to RobinhoodAPI.\nString fp_robinhood_042018 = \u0026quot;8F C1 46 FB 19 0A 16 FF F7 D1 E6 48 5C 74 54 0E 00 FF 36 A6\u0026quot;; // update with latest fp from https://www.grc.com/fingerprints.htm WiFiClientSecure sclient; //RobinhoodAPI rh(sclient); // Declare API with no fingerprint check! RobinhoodAPI rh(sclient, fp_robinhood_042018); // Declare API with fingerprint check Using the API to get live stock values.\nString stocksybl = \u0026quot;TSLA\u0026quot;; if(rh.getStockQuote(stocksybl)) { Serial.println(stocksybl); Serial.printf(\u0026quot;Latest Price : %.2f\\n\u0026quot;, rh.lastTradePrice()); Serial.printf(\u0026quot;Percent Change: %.2f%%\\n\u0026quot;, rh.percentDiff()); } ","permalink":"https://www.debashishsahu.com/posts/robinhoodapi-live-stock-prices-from-robinhood-on-esp8266/","summary":"A simple Arduino library that retrieves live stock prices from www.robinhood.com in JSON format and processes it for ESP8266. In one example, we demonstrate a whole bunch of stock prices scrolling through a dot-matrix display.\nGithub: debsahu/RobinhoodAPI An Arduino library to talk to Robin Hood using non-documented Rest API made for ESP8266. Some unofficial documentaion by @sanko is available at here]\nUsing the Library  Download this GitHub library.","title":"RobinhoodAPI Live Stock Prices From Robinhood on ESP8266"},{"content":"    This video is a collaboration with my wife who does \u0026ldquo;machine learning on big data\u0026rdquo; for a living. Here is a naive attempt at predicting a particular stock\u0026rsquo;s price and displaying it on a ESP8266. This algorithm is not the best one out there, but what is being shown here is the ability to port it elsewhere and easily integrate these complex models with micro-controllers (ESP8266) and other devices.\nGitHub:debsahu/StockPredictionPython  Install MATLAB 2017a Runtime v9.2 from here Goto Python/matlab_stock_python_lib folder and install stock python library using python setup.py install Use requirements.txt file to install required libraries. Console: $ pip -r install requirements.txt Enter appropriate values for MQTT server in upload_stock_pred.py and run python upload_stock_pred.py Upload Arduino files on your esp8266 using Arduino IDE  ","permalink":"https://www.debashishsahu.com/posts/stock-prediction-on-python-using-machine-learning-narx/","summary":"This video is a collaboration with my wife who does \u0026ldquo;machine learning on big data\u0026rdquo; for a living. Here is a naive attempt at predicting a particular stock\u0026rsquo;s price and displaying it on a ESP8266. This algorithm is not the best one out there, but what is being shown here is the ability to port it elsewhere and easily integrate these complex models with micro-controllers (ESP8266) and other devices.","title":"Stock Prediction on Python Using Machine Learning (NARX)"},{"content":"    Control components on Home Assistant directly from ESP8266. This is an Arduino Library that can be used in various projects without the requirement of setup of a MQTT sensor + automation on HA. This uses RESTful API commands.\nIdea  Control components on Home Assistant directly from ESP8266.  Implementation  Develop an Arduino Library that can be used in various projects without the requirement of setup of a MQTT sensor + automation on HA. This uses RESTful API commands.  HARestAPI Library: https://github.com/debsahu/HARestAPI An Arduino library to talk to Home Assistant using Rest API made for ESP8266.\nBeta  Can do POST effectively and not GET (reply is too long for esp8266). Try using sendGetHA(URL,Component) and provide feedback.  Using the Library  Download this GitHub library. In Arduino, Goto Sketch -\u0026gt; Include Library -\u0026gt; Add .ZIP Library\u0026hellip; and point to the zip file downloaded.  To use in your sketch include these lines.\n#include \u0026lt;HARestAPI.h\u0026gt; Declare clients before setup(). If using HA with no SSL declare WiFiClient and pass it to HARestAPI.\nWiFiClient client; HARestAPI ha(client); If using HA with SSL declare WiFiClientSecure and pass it to HARestAPI.\nWiFiClientSecure sclient; HARestAPI ha(sclient); In setup make sure to setup IP and port of HA server. Default is 8123 and if using SSL 443.\nconst char* ha_ip = \u0026quot;192.168.0.xxx\u0026quot;; uint16_t ha_port = 8123; const char* ha_pwd = \u0026quot;HA_PASSWORD\u0026quot;; //long-lived password. On HA, Profile \u0026gt; Long-Lived Access Tokens \u0026gt; Create Token ha.setHAServer(ha_ip, ha_port); ha.setHAPassword(ha_pwd); // Optional, but can use SHA1 fingerprint to confirm one is connecting to String fingerprint = \u0026quot;35 85 74 EF 67 35 A7 CE 40 69 50 F3 C0 F6 80 CF 80 3B 2E 19\u0026quot;; ha.setFingerPrint(fingerprint); All the commands below do the same thing\nHome Assistant\nURL: \u0026ldquo;/api/services/light/turn_on\u0026rdquo; (HA -\u0026gt; Developer Tools -\u0026gt; Services -\u0026gt; Service)\nComponent: \u0026ldquo;light.bedroom_light\u0026rdquo; (HA -\u0026gt; Developer Tools -\u0026gt; Services -\u0026gt; Entity)\n // 1. Send custom DATA to HA ha.sendCustomHAData(\u0026quot;/api/services/light/turn_on\u0026quot;, \u0026quot;{\\\u0026quot;entity_id\\\u0026quot;:\\\u0026quot;light.bedroom_light\\\u0026quot;}\u0026quot;);  // 2. Set component and send light to HA // Will set tmpURL to \u0026quot;/api/services/light/turn_on\u0026quot; ha.setComponent(\u0026quot;light.bedroom_light\u0026quot;); ha.sendHALight(true);  // 3. Set light on/off as bool and component is 2nd input, Send Light to HA // Will set tmpURL to \u0026quot;/api/services/light/turn_on\u0026quot; ha.sendHALight(true, \u0026quot;light.bedroom_light\u0026quot;);  // 4. Set component and URL is 2nd input, Send custom URL to HA ha.setComponent(\u0026quot;light.bedroom_light\u0026quot;); ha.sendHAURL(\u0026quot;/api/services/light/turn_on\u0026quot;);  // 5. Set URL and Send component to HA ha.setURL(\u0026quot;/api/services/light/turn_on\u0026quot;); ha.sendHAComponent(\u0026quot;light.bedroom_light\u0026quot;);  // 6. Set URL 1st argument, component 2nd, send to HA ha.sendHAComponent(\u0026quot;/api/services/light/turn_on\u0026quot;, \u0026quot;light.bedroom_light\u0026quot;);  // 7. Set URL , Set component, send to HA ha.setURL(\u0026quot;/api/services/light/turn_on\u0026quot;); ha.setComponent(\u0026quot;light.bedroom_light\u0026quot;); ha.sendHA(); ","permalink":"https://www.debashishsahu.com/posts/harestapi-control-home-assistant-directly-using-esp8266/","summary":"Control components on Home Assistant directly from ESP8266. This is an Arduino Library that can be used in various projects without the requirement of setup of a MQTT sensor + automation on HA. This uses RESTful API commands.\nIdea  Control components on Home Assistant directly from ESP8266.  Implementation  Develop an Arduino Library that can be used in various projects without the requirement of setup of a MQTT sensor + automation on HA.","title":"HARestAPI: Control Home Assistant Directly Using ESP8266"},{"content":"    Did you ever want to use ESP8266 to communicate to Home Assistant directly? Here we use a TCS34725 color sensor to read colors and change a RGB light in Home Assistant to the color observed.\nHardware  TCS34725 color sensor SSD 1306 OLED Wemos D1 mini (ESP8266)  Software  RGB Lights connected to Home Assistant  toblum/McLighting Aircoookie/WLED  ","permalink":"https://www.debashishsahu.com/posts/esp8266-based-color-sensor-talking-to-home-assistant-via-restapi/","summary":"    Did you ever want to use ESP8266 to communicate to Home Assistant directly? Here we use a TCS34725 color sensor to read colors and change a RGB light in Home Assistant to the color observed.\nHardware  TCS34725 color sensor SSD 1306 OLED Wemos D1 mini (ESP8266)  Software  RGB Lights connected to Home Assistant  toblum/McLighting Aircoookie/WLED  ","title":"ESP8266 Based Color Sensor Talking to Home Assistant via RestAPI"},{"content":"    Idea:  Use ESP8266 to talk to Twitter Get User Data or Tweet or Search Twitter Display the data on a Dot-Matrix display  Implementation I created an Arduino library to talk to Twitter using its Web API made for ESP8266. There are other approaches like using a bearer token arduino-twitter-api, but comes with limitations in terms of not being able to send tweet. This Arduino library TwitterWebAPI can both search/read and post tweets.\nAll the instructions and usage of library is described on my GitHub library page Github: debsahu/TwitterWebAPI\n TwitterWebAPI An Arduino library to talk to Twitter using Twitter Web API made for ESP8266. This is based on a sketch posted here. There are other approaches like using a bearer token arduino-twitter-api, but there are limitations in terms of not being able to send tweet. This can both search/read and post tweets.\nConsumer Key, Consumer Secret, Access Token \u0026amp; Access Token Secret In order to talk to Twitter,\n Goto https://apps.twitter.com/app/new and sign in (if you havent already). Fill in the fields, For website you can enter any webpage (e.g. http://google.com), and create your app Then click on the Keys \u0026amp; Tokens tab. Your Consumer Key and Consumer Secret will be there, if not click on Generate.  Fill the obtained Consumer Key, Consumer Secret, Access Token and Access Token Secret inside the sketch.\nUsing the Library  Download this GitHub library. In Arduino, Goto Sketch -\u0026gt; Include Library -\u0026gt; Add .ZIP Library\u0026hellip; and point to the zip file downloaded. Install TimeLib library and NTPClient library using the same procedure.  To use in your sketch include these lines.\n#include \u0026lt;TwitterWebAPI.h\u0026gt; #include \u0026lt;NTPClient.h\u0026gt; #include \u0026lt;WiFiUdp.h\u0026gt; Define Twitter GET request timeout (optional, default is 1500ms)\n#define TWI_TIMEOUT 2000 // in msec Setup correct timezone to correct the time obtained from NTP server.\nconst char *ntp_server = \u0026quot;pool.ntp.org\u0026quot;; // time1.google.com, time.nist.gov, pool.ntp.org int timezone = -5; // US Eastern timezone -05:00 HRS You WILL need Consumer Key, Consumer Secret, Access Token and Access Token Secret that can be obtained from the above steps.\n// Values below are just a placeholder // Obtain these by creating an app @ https://apps.twitter.com/ static char const consumer_key[] = \u0026quot;gkyjeH3EF32NJfiuheuyf8623\u0026quot;; static char const consumer_sec[] = \u0026quot;HbY5h$N86hg5jjd987HGFsRjJcMkjLaJw44628sOh353gI3H23\u0026quot;; static char const accesstoken[] = \u0026quot;041657084136508135-F3BE63U4Y6b346kj6bnkdlvnjbGsd3V\u0026quot;; static char const accesstoken_sec[] = \u0026quot;bsekjH8YT3dCWDdsgsdHUgdBiosesDgv43rknU4YY56Tj\u0026quot;; Declare clients before setup().\nWiFiUDP ntpUDP; NTPClient timeClient(ntpUDP, ntp_server, timezone*3600, 60000); // NTP server pool, offset (in seconds), update interval (in milliseconds) TwitterClient tcr(timeClient, consumer_key, consumer_sec, accesstoken, accesstoken_sec); In setup make sure to start NTP connection. A correct time is required to be able to post/search on Twitter.\ntcr.startNTP(); Search for a key word\nstd::string search_str; String tmsg = tcr.searchTwitter(search_str); Search Twitter User Info (eg follower count)\nstd::string search_str; tcr.searchUser(search_str); Post to Twitter\nstd::string twitter_post_msg; tcr.tweet(twitter_post_msg); Example: TwitterTweetSearchFSWiFiMgr In addition to TwitterWebAPI, make sure that TimeLib library and NTPClient library is installed, and install the following libraries\n Arduino JSON WiFiManager  For display you can either install\n MAX7219 library or MD Parola \u0026amp; MD_Max72xx  Previous idea  Too many variables on the pathway IFTTT is not the most responsive    ","permalink":"https://www.debashishsahu.com/posts/talking-to-twitter-using-twitterwebapi-for-esp8266/","summary":"Idea:  Use ESP8266 to talk to Twitter Get User Data or Tweet or Search Twitter Display the data on a Dot-Matrix display  Implementation I created an Arduino library to talk to Twitter using its Web API made for ESP8266. There are other approaches like using a bearer token arduino-twitter-api, but comes with limitations in terms of not being able to send tweet. This Arduino library TwitterWebAPI can both search/read and post tweets.","title":"Talking to Twitter Using TwitterWebAPI for ESP8266"},{"content":"    Have you wondered how to build a internet connected smoke alarm using ESP8266 and a cheap Kidde RF-SM-DC?\nOverall idea is to detect smoke alarm signals and send MQTT message. Home Assistant reads the MQTT message and sends out notifications that can be used to notify your local fire station.\nESP8266 sends a MQTT message until the smoke alarm is beeping.\nSoftware Refer to https://github.com/debsahu/ESP_External_Interrupt to build the ESP8266 part of the internet connected smoke alarm.\n   Github: debsahu/ESP_External_Interrupt\nHardware Overall idea is to detect smoke alarm signals and send MQTT message. Home Assistant reads the MQTT message and sends out notifications that can be used to notify your local fire station.\nWe will be hacking into Kidde RF-SM-DC\nZoomed Kidde RF-SM-DC\u0026rsquo;s location of 3.3V signal\n","permalink":"https://www.debashishsahu.com/posts/internet-connected-smoke-alarm/","summary":"Have you wondered how to build a internet connected smoke alarm using ESP8266 and a cheap Kidde RF-SM-DC?\nOverall idea is to detect smoke alarm signals and send MQTT message. Home Assistant reads the MQTT message and sends out notifications that can be used to notify your local fire station.\nESP8266 sends a MQTT message until the smoke alarm is beeping.\nSoftware Refer to https://github.com/debsahu/ESP_External_Interrupt to build the ESP8266 part of the internet connected smoke alarm.","title":"Internet Connected Smoke Alarm"},{"content":"    Have you ever wondered how to turn on ESP8266 using external interrupt? Build a battery powered amazon dash button or a 18650 lipo powered door bell using ESP8266 without putting the device in deep sleep? Here is your answer.\nIdea  Keep ESP8266 on OFF mode as default External 3.3V signal (can be short or long) arrives and turns ON ESP8266 ESP8266 wakes up and keeps itself awake until a task is perfomed Send MQTT data to server Put ESP8266 back to power OFF state  Implementation  RST pin is always HIGH/3.3V using 10k resistor ESP8266 is in OFF state, GPIO0 is low 3.3V signal arrives externally, GPIO0 and CH_PD are high, turn ON ESP8266 First thing ESP8266 does is turns GPIO0 to high, which means CH_PD remain high. So ESP8266 remains ON until GPIO0 is high GPIO12 is used to read value of external interupt If there is 3.3V external interrupt, GPIO is high and a MQTT message is sent as “Signal Received” or “ON” and keep ESP8266 ON until 0V signal is received. If there is 0V external interrupt, GPIO0 goes low and MQTT message is sent as “Signal Vanished” or “OFF” and turns OFF ESP8266  Software This project is built using ideas at http://www.esp8266.com/viewtopic.php?f=11\u0026amp;t=4458\nGithub: debsahu/ESP_External_Interrupt\nBuild ","permalink":"https://www.debashishsahu.com/posts/extreme-power-save-mode-esp8266-powered-on-after-external-interrupt/","summary":"Have you ever wondered how to turn on ESP8266 using external interrupt? Build a battery powered amazon dash button or a 18650 lipo powered door bell using ESP8266 without putting the device in deep sleep? Here is your answer.\nIdea  Keep ESP8266 on OFF mode as default External 3.3V signal (can be short or long) arrives and turns ON ESP8266 ESP8266 wakes up and keeps itself awake until a task is perfomed Send MQTT data to server Put ESP8266 back to power OFF state  Implementation  RST pin is always HIGH/3.","title":"Extreme Power-Save Mode: ESP8266 Powered ON After External Interrupt"},{"content":"    Wouldn’t it be nice to know if your dog’s water bowl is empty? Let us build a sensor that measures the water level every 5 minutes. This value is sent to MQTT server and Home Assistant automation takes care of the rest.\nThis sensor connects to MQTT and Home Assistant. See dogsensor.yaml for adding this to HA. Assumes that one has set up various notification sensors available in HA.\nHardware  3D Printed Case 18650 Battery ESP8266 12E Rain Water Level Sensor  Software Github: debsahu/DogWaterSensor\nUse Arduino IDE to upload code on ESP8266 by connecting GPIO0 to Ground. For Deep-Sleep to work one has to conenct GPIO16 to RESET on ESP8266.\nThis sensor connects to MQTT and Home Assistant (https://home-assistant.io/). See dogsensor.yaml for adding this to HA. Assumes that one has set up various notification sensors (https://home-assistant.io/components/#notifications) available in HA.\nSchematic ","permalink":"https://www.debashishsahu.com/posts/internet-connected-dog-water-bowl-sensor/","summary":"Wouldn’t it be nice to know if your dog’s water bowl is empty? Let us build a sensor that measures the water level every 5 minutes. This value is sent to MQTT server and Home Assistant automation takes care of the rest.\nThis sensor connects to MQTT and Home Assistant. See dogsensor.yaml for adding this to HA. Assumes that one has set up various notification sensors available in HA.","title":"Internet Connected Dog Water Bowl Sensor"},{"content":"    Lets turn on and off low powered fan running at low (\u0026lt;20V) DC voltages. We shall use a MOSFET to achieve this. Hardware  IRLML0030PBF ATTiny85 2-pin 12V Fan  Wiring MOSFETs have three terminals Drain (D), Source (S) and Gate (G), where source is connected to ground and the +12V or +5V along with load (Fan) is connected to drain. The MOSFET is on when gate voltage is higher than 1.7V and turned off when gate voltage is 0V.\nThis signal can be given out from a micro-controller as 3.3V/5V or 0V signals.\n","permalink":"https://www.debashishsahu.com/posts/mosfet-used-as-switch-to-control-a-12v-fan/","summary":"Lets turn on and off low powered fan running at low (\u0026lt;20V) DC voltages. We shall use a MOSFET to achieve this. Hardware  IRLML0030PBF ATTiny85 2-pin 12V Fan  Wiring MOSFETs have three terminals Drain (D), Source (S) and Gate (G), where source is connected to ground and the +12V or +5V along with load (Fan) is connected to drain. The MOSFET is on when gate voltage is higher than 1.","title":"MOSFET Used as Switch to Control a 12V Fan"},{"content":"    Here are the instructions to wire a stable AMS1117-3.3 voltage regulator properly. This can power an ESP8266 or any 3.3V micro-controller reliably supporting current draws up to 1A.\nHardware  AMS 1117-3.3 10 uF Electrolytic Capacitor 104 Ceramic Capacitor  Wiring AMS1117-3.3 (right to left)  Pin 1: GND Pin 2: Vout Pin 3: Vin  Connections  5-12V -\u0026gt; Vin GND -\u0026gt; GND 10 uF Electrolytic Capacitor +ve -\u0026gt; Vout 10 uF Electrolytic Capacitor GND -\u0026gt; GND 104 Ceramic Capacitor +ve -\u0026gt; Vin 104 Ceramic Capacitor GND -\u0026gt; GND  ","permalink":"https://www.debashishsahu.com/posts/how-to-build-a-3-3v-voltage-regulator/","summary":"    Here are the instructions to wire a stable AMS1117-3.3 voltage regulator properly. This can power an ESP8266 or any 3.3V micro-controller reliably supporting current draws up to 1A.\nHardware  AMS 1117-3.3 10 uF Electrolytic Capacitor 104 Ceramic Capacitor  Wiring AMS1117-3.3 (right to left)  Pin 1: GND Pin 2: Vout Pin 3: Vin  Connections  5-12V -\u0026gt; Vin GND -\u0026gt; GND 10 uF Electrolytic Capacitor +ve -\u0026gt; Vout 10 uF Electrolytic Capacitor GND -\u0026gt; GND 104 Ceramic Capacitor +ve -\u0026gt; Vin 104 Ceramic Capacitor GND -\u0026gt; GND  ","title":"How to Build a 3.3V Voltage Regulator"},{"content":"    Let’s say that you don’t have your smartphone around and someone mentions you on twitter. Wouldn’t it be nice to have a display that automatically reads your twitter mentions and show it on a scrolling display? So let’s build a internet controlled (IoT) dot-matrix display that does this for us using an ESP8266.\nThe plan to accomplish this is as follows:  Someone mentions us on twitter (in my case @debsahu) IF This Then That (IFTTT) tracks these mentions and posts this data on Adafruit.io (MQTT Broker) An ESP8266 connects to Adafruit.io and shows this data on a Dot-Matrix display  We can’t control who mentions us on twitter, so we move to the second step in our plan to configure IFTTT and Adafruit.io.\nTo setup a data feed (MQTT topic) on Adafruit.io,  Goto “feed” and “Create New Feed” Provide a unique name for the feed like “twitter-calls”, this means the MQTT topic that we need to subscribe to is “feed/twitter-calls”  To setup IFTTT to connect to twitter and Adafruit.io,  Connect your twitter and Adafruit.io account to IFTTT by logging in and giving proper permissions Create a new applet For “this“: Select “twitter” and “New mention of you” For “that“: Select “Adafruit” and “Send data to Adafruit.io”. Remember to select the correct topic created above and a message template using ingredients that suits your need.  As a part of the third step in our plan, we need to subscribe to our MQTT topic and display this data on a Dot-Matrix display.\nHardware  Wemos D1 mini (ESP8266) Max7219 Dot Matrix Display  Software  Setup Arduino IDE to be able to program an ESP8266 (Instructions on how to do this is here as well as in the video below). Install Adafruit_MQTT and MAX7219 Dot-Matrix display libraries    Library Link     Adafruit.io MQTT https://github.com/adafruit/Adafruit_MQTT_Library   Max7219 https://github.com/SensorsIot/MAX7219-4-digit-display-Library-for-ESP8266-     Upload the code found here on your ESP8266  Wiring Make these following connections between Max 7219 display and Wemos D1:\n VCC -\u0026gt; 5V GND -\u0026gt; GND DIN -\u0026gt; D7 CS -\u0026gt; D8 CLK -\u0026gt; D5  That’s it, now you should be able to see your latest twitter mentions on your Dot-Matrix displays.\n","permalink":"https://www.debashishsahu.com/posts/iot-dot-matrix-display-twitter-mentions-using-esp8266-adafruit-io-and-ifttt/","summary":"Let’s say that you don’t have your smartphone around and someone mentions you on twitter. Wouldn’t it be nice to have a display that automatically reads your twitter mentions and show it on a scrolling display? So let’s build a internet controlled (IoT) dot-matrix display that does this for us using an ESP8266.\nThe plan to accomplish this is as follows:  Someone mentions us on twitter (in my case @debsahu) IF This Then That (IFTTT) tracks these mentions and posts this data on Adafruit.","title":"IoT Dot Matrix Display: Twitter Mentions Using ESP8266 Adafruit.io and IFTTT"}]