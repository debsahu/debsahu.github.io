<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Stock on Debashish Sahu</title>
    <link>https://www.debashishsahu.com/tags/stock/</link>
    <description>Recent content in Stock on Debashish Sahu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 28 Apr 2018 00:00:00 -0500</lastBuildDate>
    <atom:link href="https://www.debashishsahu.com/tags/stock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RobinhoodAPI: Live Stock Prices From Robinhood on ESP8266</title>
      <link>https://www.debashishsahu.com/posts/robinhoodapi-live-stock-prices-from-robinhood-on-esp8266/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 -0500</pubDate>
      <guid>https://www.debashishsahu.com/posts/robinhoodapi-live-stock-prices-from-robinhood-on-esp8266/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube-nocookie.com/embed/dZNI3xsheE0?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;A simple Arduino library that retrieves live stock prices from &lt;a href=&#34;https://www.robinhood.com&#34;&gt;www.robinhood.com&lt;/a&gt; in JSON format and processes it for ESP8266. In one example, we demonstrate a whole bunch of stock prices scrolling through a dot-matrix display.&lt;/p&gt;
&lt;h2 id=&#34;github-debsahurobinhoodapi&#34;&gt;&lt;a href=&#34;https://github.com/debsahu/RobinhoodAPI&#34;&gt;Github: debsahu/RobinhoodAPI&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An Arduino library to talk to &lt;a href=&#34;https://robinhood.com/&#34;&gt;Robin Hood&lt;/a&gt; using &lt;a href=&#34;https://support.robinhood.com/hc/en-us/articles/210216823-Robinhood-API-Integrations&#34;&gt;non-documented Rest API&lt;/a&gt; made for ESP8266. Some unofficial documentaion by @sanko is available at &lt;a href=&#34;https://github.com/sanko/Robinhood&#34;&gt;here&lt;/a&gt;]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stock Prediction on Python Using Machine Learning (NARX)</title>
      <link>https://www.debashishsahu.com/posts/stock-prediction-on-python-using-machine-learning-narx/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 -0500</pubDate>
      <guid>https://www.debashishsahu.com/posts/stock-prediction-on-python-using-machine-learning-narx/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube-nocookie.com/embed/nUPW4RPoPpg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h1&gt;&lt;/h1&gt;
&lt;p&gt;This video is a collaboration with my wife who does &lt;strong&gt;&amp;ldquo;machine learning on big data&amp;rdquo;&lt;/strong&gt; for a living. Here is a naive attempt at predicting a particular stock&amp;rsquo;s price and displaying it on a ESP8266. This algorithm is not the best one out there, but what is being shown here is the ability to port it elsewhere and easily integrate these complex models with micro-controllers (ESP8266) and other devices.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
